{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'LTSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ Intertype }             = require 'intertype'\nLTSORT                    = require './legacy'\nbase_types                = null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      before:     'lt_nodelist'\n      after:      'lt_nodelist'\n    default:\n      name:       null\n      before:     null\n      after:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.after    ?= []\n      R.before   ?= []\n      R.after     = [ R.after,  ] unless @isa.list R.after\n      R.before    = [ R.before, ] unless @isa.list R.before\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Ltsort\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    GUY.props.hide @, 'types', get_base_types()\n    @cfg        = @types.create.lt_constructor_cfg cfg\n    GUY.props.hide @, 'topograph', LTSORT.new_graph @cfg\n    GUY.props.hide @, 'precedents',  {}\n    GUY.props.hide @, 'antecedents', []\n    GUY.props.hide @, 'subsequents', []\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  add: ( cfg ) ->\n    cfg = @types.create.lt_add_cfg cfg\n    #.......................................................................................................\n    if ( cfg.before.length is 0 ) and ( cfg.after.length is 0 )\n      return @_register cfg.name\n    #.......................................................................................................\n    for relative in cfg.after\n      if relative is '*'\n        @subsequents.push cfg.name unless cfg.name in @subsequents\n        continue\n      @_add 'after', cfg.name, relative\n    #.......................................................................................................\n    for relative in cfg.before\n      if relative is '*'\n        @antecedents.push cfg.name unless cfg.name in @antecedents\n        continue\n      @_add 'before', relative, cfg.name\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _register: ( name ) ->\n    @precedents[ name ] ?= []\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add: ( position, name, precedent ) ->\n    debug '^324^', { position, name, precedent, }\n    if position is 'before'\n      if      ( idx = @antecedents.indexOf name      ) > -1 then return @antecedents.splice idx + 1, 0, precedent\n      else if ( idx = @antecedents.indexOf precedent ) > -1 then return @antecedents.splice idx + 0, 0, name\n      else if ( idx = @subsequents.indexOf precedent ) > -1 then return @subsequents.splice idx + 1, 0, name\n      else if ( idx = @subsequents.indexOf name      ) > -1 then return @subsequents.splice idx + 0, 0, precedent\n    else\n      if      ( idx = @antecedents.indexOf name      ) > -1 then return @antecedents.splice idx + 1, 0, precedent\n      else if ( idx = @antecedents.indexOf precedent ) > -1 then return @antecedents.splice idx + 0, 0, name\n      else if ( idx = @subsequents.indexOf precedent ) > -1 then return @subsequents.splice idx + 1, 0, name\n      else if ( idx = @subsequents.indexOf name      ) > -1 then return @subsequents.splice idx + 0, 0, precedent\n    @_register name\n    @_register precedent\n    @precedents[ name ].push precedent\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _finalize: ->\n    LTSORT.clear @topograph\n    #.......................................................................................................\n    for name, precedents of @precedents\n      LTSORT.add @topograph, name\n      LTSORT.add @topograph, name, precedent for precedent in precedents\n    #.......................................................................................................\n    return null if ( @antecedents.length is 0 ) and ( @subsequents.length is 0 )\n    names = [ @topograph.precedents.keys()..., ]\n    #.......................................................................................................\n    ### after: '*' ###\n    for subsequent, idx in @subsequents\n      for name in [ names..., @subsequents[ ... idx ]..., @antecedents..., ]\n        continue if subsequent is name\n        # debug '^234^', [ subsequent, @topograph.precedents.get subsequent ], [ name, @topograph.precedents.get name ]\n        # debug '^234^', GUY.trm.truth subsequent in ( ( @topograph.precedents.get name       ) ? [] )\n        # debug '^234^', GUY.trm.truth name       in ( ( @topograph.precedents.get subsequent ) ? [] )\n        # continue if subsequent in ( ( @topograph.precedents.get name       ) ? [] )\n        # continue if name       in ( ( @topograph.precedents.get subsequent ) ? [] )\n        LTSORT.add @topograph, name, subsequent\n    #.......................................................................................................\n    ### before: '*' ###\n    for antecedent, idx in @antecedents\n      for name in [ names..., @antecedents[ ... idx ]..., @subsequents..., ]\n        continue if antecedent is name\n        LTSORT.add @topograph, antecedent, name\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  linearize: ( cfg ) ->\n    cfg = @types.create.lt_linearize_cfg cfg\n    @_finalize()\n    return LTSORT.group @topograph if cfg.groups\n    return LTSORT.linearize @topograph\n\n\n\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# show = ( topograph ) ->\n#   LTSORT                    = require '../../../apps/ltsort'\n#   try dependencies = LTSORT.group topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn GUY.trm.reverse error.message\n#     warn '^08-1^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   info '^08-2^', dependencies\n#   try ordering = LTSORT.linearize topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn '^08-3^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   table = []\n#   for [ name, precedents, ] from topograph.precedents.entries()\n#     precedents = precedents.join ', '\n#     table.push { name, precedents, }\n#   H.tabulate \"topograph\", table\n#   info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n#   return null\n\n\n#===========================================================================================================\nmodule.exports = { Ltsort, }\n\n\n\n"
  ]
}