{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'LTSORT'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ Intertype }             = require 'intertype'\nLTSORT                    = require './legacy'\nbase_types                = null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs    ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Ltsort\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    GUY.props.hide @, 'types', get_base_types()\n    @cfg = @types.create.lt_constructor_cfg cfg\n    GUY.props.hide @, 'topograph', LTSORT.new_graph @cfg\n    GUY.props.hide @, 'precedents',  {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_relatives: ( name, relatives ) ->\n    if '*' in relatives\n      return ( relative for relative of @precedents when relative isnt name )\n    return relatives\n\n  #---------------------------------------------------------------------------------------------------------\n  add: ( cfg ) ->\n    cfg = @types.create.lt_add_cfg cfg\n    #.......................................................................................................\n    if ( cfg.precedes.length is 0 ) and ( cfg.needs.length is 0 )\n      return @_register cfg.name\n    #.......................................................................................................\n    relatives = @_get_relatives cfg.name, cfg.needs\n    if relatives.length is 0\n      @_register cfg.name\n    else\n      @_add relative, cfg.name for relative in relatives\n    #.......................................................................................................\n    relatives = @_get_relatives cfg.name, cfg.precedes\n    if relatives.length is 0\n      @_register cfg.name\n    else\n      @_add cfg.name, relative for relative in relatives\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _register: ( name ) ->\n    @precedents[ name ] ?= []\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add: ( name, precedent ) ->\n    @_register name\n    @_register precedent\n    @precedents[ name ].push precedent\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _finalize: ->\n    LTSORT.clear @topograph\n    #.......................................................................................................\n    for name, precedents of @precedents\n      LTSORT.add @topograph, name\n      LTSORT.add @topograph, name, precedent for precedent in precedents\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  linearize: ( cfg ) ->\n    cfg = @types.create.lt_linearize_cfg cfg\n    @_finalize()\n    return LTSORT.group @topograph if cfg.groups\n    return LTSORT.linearize @topograph\n\n\n\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# show = ( topograph ) ->\n#   LTSORT                    = require '../../../apps/ltsort'\n#   try dependencies = LTSORT.group topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn GUY.trm.reverse error.message\n#     warn '^08-1^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   info '^08-2^', dependencies\n#   try ordering = LTSORT.linearize topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn '^08-3^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   table = []\n#   for [ name, precedents, ] from topograph.precedents.entries()\n#     precedents = precedents.join ', '\n#     table.push { name, precedents, }\n#   H.tabulate \"topograph\", table\n#   info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n#   return null\n\n\n#===========================================================================================================\nmodule.exports = { Ltsort, }\n\n\n\n"
  ]
}