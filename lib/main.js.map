{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nnjs_util                  = require 'util'\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LTSORT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n\n### Adapted from https://github.com/eknkc/tsort ###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_graph = ( settings ) ->\n  return @_copy settings if CND.isa settings, 'LTSORT/graph'\n  settings ?= {}\n  R =\n    '~isa':       'LTSORT/graph'\n    'precedents': new Map()\n    'loners':     settings[ 'loners' ] ? yes\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_copy = ( me ) ->\n  R = @new_graph { loners: me[ 'loners' ], }\n  for [ name, precedents, ] in Array.from me[ 'precedents' ].entries()\n    R[ 'precedents' ].set name, ( precedent for precedent in precedents )\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@populate = ( me, elements ) ->\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      @add me, element\n    else\n      [ a, b, ] = element\n      @add me, a, b\n  #.........................................................................................................\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_link = ( me, precedent, consequent ) ->\n  @_register me, precedent\n  @_register me, consequent\n  target = me[ 'precedents' ].get consequent\n  target.push precedent unless precedent in target\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_register = ( me, name ) ->\n  me[ 'precedents' ].set name, [] unless ( target = me[ 'precedents' ].get name )?\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_precedents = ( me, name ) ->\n  unless ( R = me[ 'precedents' ].get name )?\n    throw new Error \"unknown node #{rpr name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@delete = ( me, name ) ->\n  precedents = @_get_precedents me, name\n  throw new Error \"unable to remove non-root node #{rpr name}\" unless precedents.length is 0\n  me[ 'precedents' ].delete name\n  for precedents in Array.from me[ 'precedents' ].values()\n    for idx in [ precedents.length - 1 .. 0 ] by -1\n      continue unless precedents[ idx ] is name\n      precedents.splice idx, 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_has_precedents = ( me, name ) ->\n  return ( @_get_precedents me, name ).length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_precedent = ( me, name ) ->\n  for precedents in Array.from me[ 'precedents' ].values()\n    return true if ( precedents.indexOf name ) >= 0\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@find_root_nodes = ( me, loners = null ) ->\n  if loners ? me[ 'loners' ]\n    test = ( name ) => not @_has_precedents me, name\n  else\n    test = ( name ) => ( not @_has_precedents me, name ) and ( @_is_precedent me, name )\n  return ( name for name in ( Array.from me[ 'precedents' ].keys() ) when test name )\n\n#-----------------------------------------------------------------------------------------------------------\n@find_lone_nodes = ( me, root_nodes = null ) ->\n  R = []\n  for name in ( root_nodes ? @find_root_nodes me, yes )\n    R.push name unless @_is_precedent me, name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@is_lone_node = ( me, name ) ->\n  return ( not @_is_precedent me, name ) and ( not @_has_precedents me, name )\n\n#-----------------------------------------------------------------------------------------------------------\n@has_node = ( me, name ) ->\n  return me[ 'precedents' ].has name\n\n#-----------------------------------------------------------------------------------------------------------\n@has_nodes = ( me ) ->\n  return me[ 'precedents' ].size > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, precedent, consequent = null ) ->\n  return @_link me, precedent, consequent if consequent?\n  return @_register me, precedent\n\n#-----------------------------------------------------------------------------------------------------------\n@_visit = ( me, results, marks, name ) ->\n  throw new Error \"detected cycle involving node #{rpr name}\" if marks[ name ] is 'visiting'\n  return null if marks[ name ]?\n  #.......................................................................................................\n  marks[ name ] = 'visiting'\n  #.......................................................................................................\n  for precedent in @_get_precedents me, name\n    @_visit me, results, marks, precedent\n  #.......................................................................................................\n  marks[ name ] = 'ok'\n  results.push name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@linearize = ( me ) ->\n  ### As given in http://en.wikipedia.org/wiki/Topological_sorting ###\n  consequents     = Array.from me[ 'precedents' ].keys()\n  R               = []\n  marks           = {}\n  #.........................................................................................................\n  for consequent in consequents\n    @_visit me, R, marks, consequent unless marks[ consequent ]?\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@group = ( me, loners = null ) ->\n  @linearize me\n  you     = @new_graph me\n  loners  = loners ? me[ 'loners' ]\n  R       = []\n  #.........................................................................................................\n  if loners\n    if @has_nodes you\n      lone_nodes = @find_lone_nodes you\n      R.push lone_nodes\n      @delete you, lone_node for lone_node in lone_nodes\n  #.........................................................................................................\n  while @has_nodes you\n    root_nodes = @find_root_nodes you, yes\n    R.push root_nodes\n    @delete you, root_node for root_node in root_nodes\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_linearity = ( me ) ->\n  ### Linearity of a given dependency graph measures how well the dependency relations in a graph\n  determine an ordering of its nodes. For a graph that defines a unique, single chain of antecedents and\n  consequents, linearity will be 1; for a graph that defines only nodes and no dependency edges, linearity\n  will be zero; for all other kind of graphs, linearity will be the inverse of the average group length.\n  The linearity of all graphs with a single element is 1. The linearity of the emtpy graph is also 1, since\n  that is the limit that is approached taking ever more nodes out of maximally linear as well as out of\n  minimally linear (parallel-only) graphs. ###\n  [ group_count, node_count, ] = @_get_group_and_node_count me\n  return group_count / node_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_group_and_node_count = ( me ) ->\n  throw new Error \"linearity not implemented for graphs with loners\" if me[ 'loners' ]\n  groups      = @group me\n  group_count = groups.length\n  return [ 1, 1, ] if group_count is 0\n  node_count  = 0\n  node_count += group.length for group in groups\n  return [ group_count, node_count, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@get_normal_linearity = ( me ) ->\n  [ group_count, node_count, ]  = @_get_group_and_node_count me\n  return 1 if group_count == node_count == 1\n  minimum                       = 1 / node_count\n  shrink                        = 1 - minimum\n  return ( ( group_count / node_count ) - minimum ) / shrink\n\n\n\n"
  ]
}