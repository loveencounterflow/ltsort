{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { debug }                 = GUY.trm.get_loggers 'LTSORT'\n# { rpr }                   = GUY.trm\n#...........................................................................................................\n{ CT, \\\n  std                 }   = require 'cleartype'\nLTSORT                    = require './legacy'\nlt_types                  = null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nget_lt_types = ->\n  return lt_types if lt_types?\n  #.........................................................................................................\n  lt_types =\n    #.......................................................................................................\n    lt_nodelist:\n      $isa: ( x ) ->\n        # 'list.of.nonempty.text'\n        return false unless @ct.isa std.list, x\n        return x.every ( e ) => @ct.isa std.nonempty_text, e\n      $create: ( x ) ->\n        return x if x?\n        return []\n    #.......................................................................................................\n    lt_constructor_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object, x\n        return false unless @ct.isa @me.loners, x.loners\n        return true\n      loners:\n        $isa:       ( x ) -> @ct.isa std.boolean, x\n      $template:\n        loners:     true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        return { @me.$template..., x..., }\n    #.......................................................................................................\n    lt_add_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object,   x\n        return false unless @ct.isa @me.name,     x.name\n        return false unless @ct.isa @me.precedes, x.precedes\n        return false unless @ct.isa @me.needs,    x.needs\n        return true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        R           = { @me.$template..., precedes: [], needs: [], x..., }\n        R.needs     = [ R.needs,    ] if @ct.isa std.text, R.needs\n        R.precedes  = [ R.precedes, ] if @ct.isa std.text, R.precedes\n        return R\n      #.....................................................................................................\n      name:         $isa: ( x ) -> @ct.isa std.nonempty_text,             x\n      precedes:     $isa: ( x ) -> @ct.isa_optional lt_types.lt_nodelist, x\n      needs:        $isa: ( x ) -> @ct.isa_optional lt_types.lt_nodelist, x\n      $template:\n        name:       null\n        precedes:   null\n        needs:      null\n    #.......................................................................................................\n    lt_linearize_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object, x\n        return false unless @ct.isa @me.groups, x.groups\n        return true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        return { @me.$template..., x..., }\n      #.....................................................................................................\n      groups:\n        $isa:       ( x ) -> @ct.isa std.boolean, x\n      $template:\n        groups:     false\n  #.........................................................................................................\n  return lt_types\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Ltsort\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    GUY.props.hide @, 'lt_types', get_lt_types()\n    @cfg = CT.create @lt_types.lt_constructor_cfg, cfg\n    GUY.props.hide @, 'topograph', LTSORT.new_graph @cfg\n    GUY.props.hide @, 'precedents',  {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_relatives: ( name, relatives ) ->\n    if '*' in relatives\n      return ( relative for relative of @precedents when relative isnt name )\n    return relatives\n\n  #---------------------------------------------------------------------------------------------------------\n  add: ( cfg ) ->\n    cfg = CT.create @lt_types.lt_add_cfg, cfg\n    #.......................................................................................................\n    if ( cfg.precedes.length is 0 ) and ( cfg.needs.length is 0 )\n      return @_register cfg.name\n    #.......................................................................................................\n    relatives = @_get_relatives cfg.name, cfg.needs\n    if relatives.length is 0\n      @_register cfg.name\n    else\n      @_add relative, cfg.name for relative in relatives\n    #.......................................................................................................\n    relatives = @_get_relatives cfg.name, cfg.precedes\n    if relatives.length is 0\n      @_register cfg.name\n    else\n      @_add cfg.name, relative for relative in relatives\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _register: ( name ) ->\n    @precedents[ name ] ?= []\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add: ( name, precedent ) ->\n    @_register name\n    @_register precedent\n    @precedents[ name ].push precedent\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _finalize: ->\n    LTSORT.clear @topograph\n    #.......................................................................................................\n    for name, precedents of @precedents\n      LTSORT.add @topograph, name\n      LTSORT.add @topograph, name, precedent for precedent in precedents\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  linearize: ( cfg ) ->\n    cfg = CT.create @lt_types.lt_linearize_cfg, cfg\n    @_finalize()\n    return LTSORT.group @topograph if cfg.groups\n    return LTSORT.linearize @topograph\n\n\n\n\n# #===========================================================================================================\n# #\n# #-----------------------------------------------------------------------------------------------------------\n# show = ( topograph ) ->\n#   LTSORT                    = require '../../../apps/ltsort'\n#   try dependencies = LTSORT.group topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn GUY.trm.reverse error.message\n#     warn '^08-1^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   info '^08-2^', dependencies\n#   try ordering = LTSORT.linearize topograph catch error\n#     throw error unless ( error.message.match /detected cycle involving node/ )?\n#     warn '^08-3^', GUY.trm.reverse error.message\n#     # throw new DBay_sqlm_circular_references_error '^dbay/dbm@4^', name, ref_name\n#   table = []\n#   for [ name, precedents, ] from topograph.precedents.entries()\n#     precedents = precedents.join ', '\n#     table.push { name, precedents, }\n#   H.tabulate \"topograph\", table\n#   info '^08-4^', ( GUY.trm.yellow x for x in ordering ).join GUY.trm.grey ' => '\n#   return null\n\n\n#===========================================================================================================\nmodule.exports = { Ltsort, }\n\n\n\n"
  ]
}